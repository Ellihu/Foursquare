#pragma checksum "D:\Github\Pruebas\FoursquarePlaces\Presentacion\Presentacion\Views\Places\_Markers.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "de86419b478842fc7266bcb3b61dd7e22ed2ea6a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Places__Markers), @"mvc.1.0.view", @"/Views/Places/_Markers.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Github\Pruebas\FoursquarePlaces\Presentacion\Presentacion\Views\_ViewImports.cshtml"
using Presentacion;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Github\Pruebas\FoursquarePlaces\Presentacion\Presentacion\Views\_ViewImports.cshtml"
using Presentacion.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"de86419b478842fc7266bcb3b61dd7e22ed2ea6a", @"/Views/Places/_Markers.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ccf57c469e1b8e05140e56e7f20f29b558100cc2", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Places__Markers : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Github\Pruebas\FoursquarePlaces\Presentacion\Presentacion\Views\Places\_Markers.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""modal"" id=""favoritosModal"">
    <div class=""modal-dialog modal-dialog-scrollable modal-xl"">
        <div class=""modal-content"">

            <div class=""modal-header"">
                <h4 class=""modal-title"">Mis lugares favoritos </h4>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal""></button>
            </div>

            <div class=""modal-body"">

                <div class=""row"" id=""div-myMarkers""></div>

            </div>
        </div>
    </div>
</div>


<script>

    function verFavoritos(){

        $(""#favoritosModal"").modal('show');

           getMarkers()
            .then((markers) => {
                    console.log(markers)

                    if(markers.length == 0)
                        throw 'Aún no has guardao marcadores.'

                    let markersCards= markerToCards(markers);
                        $(""#div-myMarkers"").html(markersCards);

            }).catch((err) => {
                console");
            WriteLiteral(@".log(err)
                $(""#div-myMarkers"").html(err);
            })
    }

    function saveFavorito_click(markerId){

          let currLocation=currentLocations.find(x => x.fsq_id == markerId)

          $(""#div-saveMarker"").html('<a href=""#"" class=""link-secondary float-end"">  Guardardando...</a>')

          saveFavorito(currLocation)
            .then((locationSaved) => {
                $(""#div-saveMarker"").html('<a href=""#"" class=""link-success float-end"">  Guardado</a>')

            }).catch((err) => {
                console.log(err)
                $(""#div-saveMarker"").html('<a href=""#"" class=""link-secondary  float-end"">  Error</a>')
            })
    }

    function saveFavorito(place){

            let imagenes = document.getElementsByClassName('markerImage');
            let imagen= imagenes.length > 0 ? imagenes[0].currentSrc  : '';
            let categoria= place.categories.length > 0 ? place.categories[0].name  : '';

            return new Promise((resolve, rej");
            WriteLiteral(@"ect) => {

                   $.ajax({
                        url:'/Places/CreateMarker',
                        type: ""POST"",
                        data: {
                            marker:{
                                Fsq_id : place.fsq_id,
                                Nombre: place.name,
                                Direccion: `${place.location.formatted_address}, ${place.location.country}`,
                                Imagen: imagen,
                                Categoria: categoria,
                            }

                        },
                        success: function (data) {

                               resolve(data);
                        },
                        error: function (err) {
                            reject(err);
                        }
                    });
              });
      }
      
      const getMarkers = ( )=> new Promise(function (resolve, reject) {

                   $.ajax({
                       ");
            WriteLiteral(@" url:'/Places/GetMarkers',
                        type: ""GET"",
                        success: function (data) {

                            resolve(data);

                        }
                    }).fail(function (err) {
                        console.log(err)
                        reject('Ocurrio un error al obtener las imagenes');
                    });
      });

         const deleteMarker = (markerId)=> new Promise(function (resolve, reject) {

                   $.ajax({
                        url:'/Places/Delete',
                        type: ""DELETE"",
                        data: {markerId},
                        success: function (data) {

                            resolve(data);

                        }
                    }).fail(function (err) {
                        console.log(err)
                        reject('Ocurrio un error al intentar eliminar el marcador');
                    });
      });
      
      function markerToCards(markers");
            WriteLiteral(@"){

        let html =""""


        for(item of markers){

           html +=
                    `   <div class="" col-3  mb-2"" id=""div-marker${item.id}"">
                        <div class=""card"">
                            <div class=""card-body"">
                                <div class="" card-title alert alert-light alert-dismissible p-0 m-0"">
                                    <button type=""button"" class=""btn-close p-0""  onclick=""deleteFavorito(${item.id},'${item.nombre}')""></button>
                                    <h6 class=""p-1"">${item.nombre}</h6>
                                </div>
                                <img ${!item.imagen ? 'style=""display:none!important""' : ''} src=""${item.imagen}"" class=""mx-auto d-block"" style=""width:100%"">

                                <p class=""card-text"">${item.direccion}</p>
                                <p class=""card-text"">A ${item.ranking} ${item.ranking==1 ? 'persona le': 'personas les'} gusta.</p>

                              ");
            WriteLiteral(@"  <a href=""#"" class=""card-link"" onclick=""verMarcardorEnMapa('${item.fsq_id}')"">Ver en mapa</a>
                            </div>
                        </div>
                    </div>
                    `
        }

        return html;
      }
      
      function verMarcardorEnMapa(fsq_id){

          $(""#favoritosModal"").modal('hide');
           $(""#imagesContainer"").hide();

          removeMarkers()
          markerSavedDetail(fsq_id);
          mostrarFotos(fsq_id);
      }
      
      function deleteFavorito(markerId,nombre){
          
          if (confirm(`¿Confirma eliminar el marcador ${nombre}?`)) {

              deleteMarker(markerId)
              .then(() => {
                  $(""#div-marker"" + markerId).remove();

            }).catch((err) => {
                console.log(err)
                $(""#div-detalleMarker"").html('Sin resultados de ésta ubicación...');
            })
            }

      }
      
      function markerSavedDetail(placeId){");
            WriteLiteral(@"

            $(""#div-detalleMarker"").html('Buscando detalle...');

            getLocationDetails(placeId)
            .then((detalle) => {

                let htmlDetalle=  `<h4 class=""card-title"">${detalle.name}</h4>
                <label> <strong> Zona horaria:</strong>  ${detalle.timezone} </label><br />
                <label> <strong>  Dirección:</strong> ${detalle.location.formatted_address}, ${detalle.location.country} </label>
               <div id=""div-saveMarker""><a href=""#"" class=""link-success float-end"">  Guardardado</a></div>`;
               
                $(""#div-detalleMarker"").html(htmlDetalle);

                let location= {
                    lat: detalle.geocodes.main.latitude,
                    lng: detalle.geocodes.main.longitude,
                }

                addMarker(detalle.fsq_id,location,detalle.name)
                moveToLocation(location)

            }).catch((err) => {
                console.log(err)
                $(""#div-detalleMark");
            WriteLiteral("er\").html(\'Sin resultados de ésta ubicación...\');\r\n            })\r\n      }\r\n</script>\r\n\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
